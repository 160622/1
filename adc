      ORG 0 ; reset vector
0000|  JMP main ; jump to the main program
       ORG 3 ; external 0 interrupt vector
0003|  JMP ext0ISR ; jump to the external 0 ISR
       ORG 0BH ; timer 0 interrupt vector
000B|  JMP timer0ISR ; jump to timer 0 ISR
       ORG 30H ; main program starts here
       main:
0030|  SETB IT0 ; set external 0 interrupt as edge-activated
0032|  SETB EX0 ; enable external 0 interrupt
0034|  CLR P0.7 ; enable DAC WR line
0036|  MOV TMOD, #2 ; set timer 0 as 8-bit auto-reload interval timer
0039|  MOV TH0, #-50 ; | put -50 into timer 0 high-byte - this reload value,
       ; | with system clock of 12 MHz, will result in a timer 0 overflow every 50 us
003C|  MOV TL0, #-50 ; | put the same value in the low byte to ensure the timer starts counting from
       ; | 236 (256 - 50) rather than 0
003F|  SETB TR0 ; start timer 0
0041|  SETB ET0 ; enable timer 0 interrupt
0043|  SETB EA ; set the global interrupt enable bit
0045|  JMP $ ; jump back to the same line (ie: do nothing)
       ; end of main program
       ; timer 0 ISR - simply starts an ADC conversion
       timer0ISR:
0047|  CLR P3.6 ; clear ADC WR line
0049|  SETB P3.6 ; then set it - this results in the required positive edge to start a conversion
004B|  RETI ; return from interrupt
       ; external 0 ISR - responds to the ADC conversion complete interrupt
       ext0ISR:
004C|  CLR P3.7 ; clear the ADC RD line - this enables the data lines
004E|  MOV P1, P2 ; take the data from the ADC on P2 and send it to the DAC data lines on P1
0051|  SETB P3.7 ; disable the ADC data lines by setting RD
0053|  RETI ; return from interrupt
